/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function AutonumericOptions() { }
if (false) {
    /** @type {?|undefined} */
    AutonumericOptions.prototype.allowDecimalPadding;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.alwaysAllowDecimalCharacter;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.caretPositionOnFocus;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.createLocalList;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.currencySymbol;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.currencySymbolPlacement;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.decimalCharacter;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.decimalCharacterAlternative;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.decimalPlaces;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.decimalPlacesRawValue;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.decimalPlacesShownOnBlur;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.decimalPlacesShownOnFocus;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.defaultValueOverride;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.digitalGroupSpacing;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.digitGroupSeparator;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.divisorWhenUnfocused;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.emptyInputBehavior;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.eventBubbles;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.eventIsCancelable;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.failOnUnknownOption;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.formatOnPageLoad;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.formulaMode;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.historySize;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.isCancellable;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.leadingZero;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.maximumValue;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.minimumValue;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.modifyValueOnWheel;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.negativeBracketsTypeOnBlur;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.negativePositiveSignPlacement;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.negativeSignCharacter;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.noEventListeners;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.onInvalidPaste;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.outputFormat;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.overrideMinMaxLimits;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.positiveSignCharacter;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.rawValueDivisor;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.readOnly;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.roundingMethod;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.saveValueToSessionStorage;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.selectNumberOnly;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.selectOnFocus;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.serializeSpaces;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.showOnlyNumbersOnFocus;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.showPositiveSign;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.showWarnings;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.styleRules;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.suffixText;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.symbolWhenUnfocused;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.unformatOnHover;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.unformatOnSubmit;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.valuesToStrings;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.watchExternalChanges;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.wheelOn;
    /** @type {?|undefined} */
    AutonumericOptions.prototype.wheelStep;
}
//# sourceMappingURL=data:application/json;base64,