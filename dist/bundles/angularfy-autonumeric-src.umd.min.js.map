{"version":3,"sources":["ng://@angularfy/autonumeric/src/lib/autonumeric-defaults.service.ts","ng://@angularfy/autonumeric/src/lib/autonumeric.directive.ts","ng://@angularfy/autonumeric/src/lib/autonumeric.module.ts"],"names":["AutonumericDefaults","Injectable","this","allowDecimalPadding","AutoNumeric","options","always","alwaysAllowDecimalCharacter","doNotAllow","caretPositionOnFocus","doNoForceCaretPosition","createLocalList","createList","currencySymbol","none","currencySymbolPlacement","prefix","decimalCharacter","dot","decimalCharacterAlternative","decimalPlaces","two","decimalPlacesRawValue","useDefault","decimalPlacesShownOnBlur","decimalPlacesShownOnFocus","defaultValueOverride","doNotOverride","digitalGroupSpacing","three","digitGroupSeparator","comma","divisorWhenUnfocused","emptyInputBehavior","focus","eventBubbles","bubbles","eventIsCancelable","isCancelable","failOnUnknownOption","ignore","formatOnPageLoad","format","formulaMode","disabled","historySize","medium","isCancellable","cancellable","leadingZero","deny","maximumValue","tenTrillions","minimumValue","modifyValueOnWheel","modifyValue","negativeBracketsTypeOnBlur","negativePositiveSignPlacement","negativeSignCharacter","hyphen","noEventListeners","addEvents","onInvalidPaste","error","outputFormat","overrideMinMaxLimits","positiveSignCharacter","plus","rawValueDivisor","readOnly","readWrite","roundingMethod","halfUpSymmetric","saveValueToSessionStorage","doNotSave","selectNumberOnly","selectNumbersOnly","selectOnFocus","select","serializeSpaces","showOnlyNumbersOnFocus","showAll","showPositiveSign","hide","showWarnings","show","styleRules","suffixText","symbolWhenUnfocused","unformatOnHover","unformat","unformatOnSubmit","keepCurrentValue","valuesToStrings","watchExternalChanges","doNotWatch","wheelOn","wheelStep","progressive","AUTONUMERIC_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AutonumericDirective","multi","prototype","ngOnInit","instance","elm","nativeElement","getOptions","normalize","_this","normalized","Object","keys","forEach","key","ngAfterViewInit","setDisabledState","isDisabled","unsubscribeFormat","renderer","listen","$event","formatted","emit","unsubscribeRawValueModified","onChangeFn","detail","newRawValue","rawValueModified","undefined","predefined","defaults","Error","getPredefinedOptions","ngOnChanges","changes","strategy","reset","update","ngOnDestroy","remove","e","writeValue","value","set","initialValue","registerOnChange","fn","registerOnTouched","onTouchedFn","setProperty","domElement","removeAttribute","Directive","args","selector","providers","host","(blur)","ElementRef","Renderer2","Input","Output","EventEmitter","USER_DEFAULTS","InjectionToken","defaultsFactory","userDefaults","assign","AutonumericModule","forRoot","ngModule","useValue","useFactory","deps","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {AutonumericOptions} from \"./autonumeric.model\";\r\nimport AutoNumeric from 'autonumeric';\r\n@Injectable()\r\nexport class AutonumericDefaults implements AutonumericOptions {\r\n    allowDecimalPadding = AutoNumeric.options.allowDecimalPadding.always;\r\n    alwaysAllowDecimalCharacter = AutoNumeric.options.alwaysAllowDecimalCharacter.doNotAllow;\r\n    caretPositionOnFocus = AutoNumeric.options.caretPositionOnFocus.doNoForceCaretPosition;\r\n    createLocalList = AutoNumeric.options.createLocalList.createList;\r\n    currencySymbol = AutoNumeric.options.currencySymbol.none;\r\n    currencySymbolPlacement = AutoNumeric.options.currencySymbolPlacement.prefix;\r\n    decimalCharacter = AutoNumeric.options.decimalCharacter.dot;\r\n    decimalCharacterAlternative = AutoNumeric.options.decimalCharacterAlternative.none;\r\n    decimalPlaces = AutoNumeric.options.decimalPlaces.two;\r\n    decimalPlacesRawValue = AutoNumeric.options.decimalPlacesRawValue.useDefault;\r\n    decimalPlacesShownOnBlur = AutoNumeric.options.decimalPlacesShownOnBlur.useDefault;\r\n    decimalPlacesShownOnFocus = AutoNumeric.options.decimalPlacesShownOnFocus.useDefault;\r\n    defaultValueOverride = AutoNumeric.options.defaultValueOverride.doNotOverride;\r\n    digitalGroupSpacing = AutoNumeric.options.digitalGroupSpacing.three;\r\n    digitGroupSeparator = AutoNumeric.options.digitGroupSeparator.comma;\r\n    divisorWhenUnfocused = AutoNumeric.options.divisorWhenUnfocused.none;\r\n    emptyInputBehavior = AutoNumeric.options.emptyInputBehavior.focus;\r\n    eventBubbles = AutoNumeric.options.eventBubbles.bubbles;\r\n    eventIsCancelable = AutoNumeric.options.eventIsCancelable.isCancelable;\r\n    failOnUnknownOption = AutoNumeric.options.failOnUnknownOption.ignore;\r\n    formatOnPageLoad = AutoNumeric.options.formatOnPageLoad.format;\r\n    formulaMode = AutoNumeric.options.formulaMode.disabled;\r\n    historySize = AutoNumeric.options.historySize.medium;\r\n    isCancellable = AutoNumeric.options.isCancellable.cancellable;\r\n    leadingZero = AutoNumeric.options.leadingZero.deny;\r\n    maximumValue = AutoNumeric.options.maximumValue.tenTrillions;\r\n    minimumValue = AutoNumeric.options.minimumValue.tenTrillions;\r\n    modifyValueOnWheel = AutoNumeric.options.modifyValueOnWheel.modifyValue;\r\n    negativeBracketsTypeOnBlur = AutoNumeric.options.negativeBracketsTypeOnBlur.none;\r\n    negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.none;\r\n    negativeSignCharacter = AutoNumeric.options.negativeSignCharacter.hyphen;\r\n    noEventListeners = AutoNumeric.options.noEventListeners.addEvents;\r\n    onInvalidPaste = AutoNumeric.options.onInvalidPaste.error;\r\n    outputFormat = AutoNumeric.options.outputFormat.none;\r\n    overrideMinMaxLimits = AutoNumeric.options.overrideMinMaxLimits.doNotOverride;\r\n    positiveSignCharacter = AutoNumeric.options.positiveSignCharacter.plus;\r\n    rawValueDivisor = AutoNumeric.options.rawValueDivisor.none;\r\n    readOnly = AutoNumeric.options.readOnly.readWrite;\r\n    roundingMethod = AutoNumeric.options.roundingMethod.halfUpSymmetric;\r\n    saveValueToSessionStorage = AutoNumeric.options.saveValueToSessionStorage.doNotSave;\r\n    selectNumberOnly = AutoNumeric.options.selectNumberOnly.selectNumbersOnly;\r\n    selectOnFocus = AutoNumeric.options.selectOnFocus.select;\r\n    serializeSpaces = AutoNumeric.options.serializeSpaces.plus;\r\n    showOnlyNumbersOnFocus = AutoNumeric.options.showOnlyNumbersOnFocus.showAll;\r\n    showPositiveSign = AutoNumeric.options.showPositiveSign.hide;\r\n    showWarnings = AutoNumeric.options.showWarnings.show;\r\n    styleRules = AutoNumeric.options.styleRules.none;\r\n    suffixText = AutoNumeric.options.suffixText.none;\r\n    symbolWhenUnfocused = AutoNumeric.options.symbolWhenUnfocused.none;\r\n    unformatOnHover = AutoNumeric.options.unformatOnHover.unformat;\r\n    unformatOnSubmit = AutoNumeric.options.unformatOnSubmit.keepCurrentValue;\r\n    valuesToStrings = AutoNumeric.options.valuesToStrings.none;\r\n    watchExternalChanges = AutoNumeric.options.watchExternalChanges.doNotWatch;\r\n    wheelOn = AutoNumeric.options.wheelOn.focus;\r\n    wheelStep = AutoNumeric.options.wheelStep.progressive;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport AutoNumeric from 'autonumeric';\r\nimport {AutonumericDefaults} from './autonumeric-defaults.service';\r\nimport {AutonumericOptions} from './autonumeric.model';\r\n\r\nexport const AUTONUMERIC_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => AutonumericDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[autonumeric]',\r\n  providers: [AUTONUMERIC_CONTROL_VALUE_ACCESSOR],\r\n  // tslint:disable-next-line:use-host-property-decorator\r\n  host: {\r\n    '(blur)': 'onTouchedFn()'\r\n  },\r\n})\r\nexport class AutonumericDirective implements OnInit, AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n  /* Defines the strategy to apply when options change.\r\n   * reset will drop any previous options\r\n   * update will change old values one by one but keep those that are not mentioned in the new options\r\n   */\r\n  @Input()\r\n  strategy: 'reset' | 'update' = 'reset';\r\n\r\n  @Input()\r\n  options: AutonumericOptions;\r\n  @Input()\r\n  predefined: string;\r\n  instance: any;\r\n  private isDisabled = false;\r\n  private initialValue: any;\r\n  unsubscribeFormat: () => void;\r\n  unsubscribeRawValueModified: () => void;\r\n  @Output()\r\n  formatted = new EventEmitter();\r\n  @Output()\r\n  rawValueModified = new EventEmitter();\r\n  onChangeFn: (value: any) => void = () => {\r\n  };\r\n\r\n  onTouchedFn = () => {\r\n  };\r\n\r\n  constructor(\r\n    private elm: ElementRef,\r\n    private defaults: AutonumericDefaults,\r\n    private renderer: Renderer2,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\tthis.instance = new AutoNumeric(\r\n      this.elm.nativeElement,\r\n      this.getOptions()\r\n    );\r\n  }\r\n\r\n  private normalize(options: any) {\r\n    const normalized = {};\r\n    Object.keys(AutoNumeric.options).forEach(key => {\r\n      if (typeof options[key] === 'undefined') {\r\n        normalized[key] = (this.defaults as any)[key];\r\n      } else {\r\n        normalized[key] = options[key];\r\n      }\r\n    });\r\n    return normalized;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.setDisabledState(this.isDisabled);\r\n    this.unsubscribeFormat = this.renderer.listen(this.elm.nativeElement, 'autoNumeric:formatted', ($event) => {\r\n      this.formatted.emit($event);\r\n    });\r\n    this.unsubscribeRawValueModified = this.renderer.listen(this.elm.nativeElement, 'autoNumeric:rawValueModified', ($event) => {\r\n      this.onChangeFn($event.detail.newRawValue);\r\n      this.rawValueModified.emit($event);\r\n    });\r\n  }\r\n\r\n  private getOptions() {\r\n    if (this.options === undefined && this.predefined === undefined) {\r\n      return this.defaults;\r\n    }\r\n    if (this.options !== undefined && this.predefined !== undefined) {\r\n      throw new Error('predefined attribute could not be combined with options. Please use either predefined or options');\r\n    }\r\n    if (this.options !== undefined) {\r\n      return this.normalize(this.options);\r\n    }\r\n    const predefined = AutoNumeric.getPredefinedOptions()[this.predefined];\r\n    return this.normalize(predefined);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.instance) {\r\n      return;\r\n    }\r\n    if (changes.options || changes.predefined) {\r\n      if (this.strategy === 'reset') {\r\n        this.instance.options.reset();\r\n      }\r\n      this.instance.update(this.getOptions());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribeFormat();\r\n    this.unsubscribeRawValueModified();\r\n    try {\r\n      this.instance.remove(); // remove listeners\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    if (this.instance) {\r\n      this.instance.set(value);\r\n    } else {\r\n      // autonumeric hasn't been initialised yet, store the value for later use\r\n      this.initialValue = value;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeFn = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouchedFn = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n    if (this.instance) {\r\n      if (this.isDisabled) {\r\n        this.renderer.setProperty(this.instance.domElement, 'disabled', 'disabled');\r\n      } else {\r\n        this.renderer.removeAttribute(this.instance.domElement, 'disabled');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {AutonumericOptions} from \"./autonumeric.model\";\r\nimport {AutonumericDefaults} from \"./autonumeric-defaults.service\";\r\nimport {AutonumericDirective} from \"./autonumeric.directive\";\r\nimport {CommonModule} from '@angular/common';\r\n\r\nexport const USER_DEFAULTS = new InjectionToken('autonumeric defaults');\r\n\r\nexport function defaultsFactory(userDefaults: AutonumericOptions): AutonumericDefaults {\r\n    const defaults: AutonumericDefaults = new AutonumericDefaults();\r\n    Object.assign(defaults, userDefaults);\r\n    return defaults;\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [AutonumericDirective],\r\n    exports: [AutonumericDirective]\r\n})\r\nexport class AutonumericModule {\r\n    static forRoot(userDefaults: AutonumericOptions = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: AutonumericModule,\r\n            providers: [\r\n                {\r\n                    provide: USER_DEFAULTS,\r\n                    useValue: userDefaults\r\n                },\r\n                {\r\n                    provide: AutonumericDefaults,\r\n                    useFactory: defaultsFactory,\r\n                    deps: [USER_DEFAULTS]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}